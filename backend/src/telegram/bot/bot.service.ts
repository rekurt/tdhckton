// import { Scene } from 'nestjs-telegraf';
// // eslint-disable-next-line @typescript-eslint/no-var-requires
// const RedisSession = require('telegraf-session-redis');
// import { Injectable, Logger } from '@nestjs/common';
// import { Telegraf } from 'telegraf';
// import { Stage, WizardScene } from 'telegraf/typings/scenes';
// import RedisConf from 'src/config/redis';
// import { ChatDTO } from 'src/entities/interfaces/ChatDto';
// import token from 'src/config/token';


// /**
//  * –í –ë–æ—Ç—Å–µ—Ä–≤–∏—Å–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–æ—Ç—É. –ó–∞—Ç–µ–º –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è. –ë–æ—Ç —Å–µ—Ä–≤–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞–∫–µ—Ç–∞ telegraf
//  * –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –º–µ–Ω—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–ª—å–∑—É—é—Ç—Å—è –∫–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –∫–æ–º–º–∞–Ω–ª —Ç–∞–∫ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
//  * –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ '/subscribe' –∏ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '‚ûï /subscribe'. –ò–º –Ω–∞–∑–∞–Ω—á–∞—é—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.
//  * –¢–æ –µ—Å—Ç—å –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–µ –Ω–∞ express, –≥–¥–µ bot.use(middleware(context, next))
//  * –î–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è wizard 
//  * –∏ —Å–∞–º –º–µ—Ç–æ–¥-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ telegraf-handlers/config.handler.ts
//  * 
//  *
//  * @export
//  * @class BotService
//  */
// @Injectable()
// export class BotService {
//   private logger = new Logger(BotService.name);
//   private bot: Telegraf<any>;
//   //private wizards: WizardScene[];

//   constructor() {
//     const botToken: string = token;

//     // —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Ä–µ–¥–∏—Å–µ. –Ω–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã –ø–æ–º–Ω–∏—Ç—å –Ω–∞ —á—ë–º –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è —á–µ–ª–æ–≤–µ–∫.
//     const session = new RedisSession({
//       store: RedisConf,
//       ttl: 86400
//     })
//     this.bot.use(session.middleware());
//     this.bot.use(stage.middleware());
//     this.bot.catch((er, ctx)=> this.logger.error(er));

//     // this.bot.hears('üëØ‚Äç‚ôÄÔ∏è /models', async (ctx) => {
//     //   return models.call(this, ctx);
//     // })

//     // this.bot.hears('‚ûï /subscribe', async (ctx) => {
//     //   return subscribe.call(this, ctx);
//     // })

//     // this.bot.hears('‚ùå /unsubscribe', async (ctx) => {
//     //   return unsubscribe.call(this, ctx);
//     // })

//     // this.bot.hears('üìã /subscribers', async (ctx) => {
//     //   return subscribers.call(this, ctx);
//     // })

//     // this.bot.hears('‚öôÔ∏è /settings', async (ctx) => {
//     //   return settingsInfo.call(this, ctx);
//     // })

//     // this.bot.action(/^\/show .*$/gm, async (ctx) => {
//     //   return show.call(this, ctx);
//     // })

//     // this.bot.hears('üì∏ /show', async (ctx) => {
//     //   return show.call(this, ctx);
//     // })

//     // this.bot.command('models', async (ctx) => {
//     //   return models.call(this, ctx);
//     // });

//     // this.bot.command('subscribe', async (ctx) =>  {
//     //   return subscribe.call(this, ctx);
//     // })

//     // this.bot.command('unsubscribe', async (ctx) => {
//     //   return unsubscribe.call(this, ctx);
//     // })

//     // this.bot.command('subscribers', async (ctx) => {
//     //   return subscribers.call(this, ctx);
//     // })

//     // this.bot.command('settings', async (ctx) => {
//     //   return settingsInfo.call(this, ctx);
//     // });

//     // this.bot.command('show', async (ctx) => {
//     //   return this.show.call(this, ctx);
//     // });

//     // this.bot.command('start', async (ctx) => {
//     //   const { user } = ctx.session;
//     //   return ctx.reply(`Hello ${user.username}! You can see bot's commands by /commands.`, addCommandsKeyBoard());
//     // })

//     // // –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –ø—Ä–æ—â–µ –∫–æ–≥–¥–∞ –µ—Å—Ç—å –∫–æ–º–º–∞–Ω–¥—ã. –∏ —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ –≤–æ –≤—Å–µ—Ö –±–æ—Ç–∞—Ö - —Ä–µ–∞–ª–∏–∑—É–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –∏ —Ç–µ—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é.
//     // this.bot.command('commands', async (ctx) => {
//     //   ctx.reply(`This commands are available:
//     //   1. /subscribe <title> - to subscribe channel on bot. If title is provided it will associated to subscribed channel;
//     //   2. /subscribers - to see all your added channels;
//     //   3. /models - to show all models;
//     //   4. /unsubscribe <title> - to unsubscribe channel from bot. If no title is provided this channel will be unsubscribed, othwerwise channel with provided title will be unsubscribed;
//     //   5. /settings - to get notification settings for this channel or make a new one;
//     //   6. /show - to get screenshots of your models right now.
//     //   7. /show <modelName> - to get screenshots of your model with modelName.

//     //   You can add bot to whatever channel you want.
//     //   `, addCommandsKeyBoard());
//     // });

//     // this.bot.action('getSettings', async (ctx) => {
//     //   return settings.call(this, ctx);
//     // })

//     // this.bot.action('configureSettings', async (ctx) => {
//     //   return configureNotifications.call(this, ctx);
//     // })
//   }

//   public launch(): void {
//     this.bot.launch();
//   }
 
//   // public async sendStatusMessage({ user, messages } : { user: User, messages: {} }): Promise<void> {
//   //   const promises = [];
//   //   user.telegramChats.forEach((telegramChat: ChatDTO) => {
//   //     let result = '';
//   //     if (result.length) promises.push(this.bot.telegram.sendMessage(telegramChat.chatId, result));
//   //   })

//   //   try {
//   //     await Promise.all(promises);
//   //   } catch(err) {
//   //     console.log(err);
//   //   }
//   // }

//   /**
//    * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫—É.
//    *
//    * @param {{ user: User, message: string }} { user, message }
//    * @return {Promise} Promise void
//    * @memberof BotService
//    */
//   public async sendMessage(chat: ChatDTO, message:string): Promise<void> {
//     try {
//       await this.bot.telegram.sendMessage(chat.chatId, message)
//     } catch(err) {
//       this.logger.error({
//         chat,
//         message,
//       });
//     }
//   }

//   // /**
//   //  * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ–¥–ø–∏—Å—á–∏–∫—É. –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ –±–æ–ª—å—à–æ–π —Ç–æ —à–ª—ë–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç, —á—Ç–æ–±—ã –∫–∞—á–µ—Å—Ç–≤–æ –Ω–µ –ø—Ä–æ–ø–∞–ª–æ.
//   //  *
//   //  * @param {({ user: User, photoPath: string, photosCount: undefined | number })} { user, photoPath, photosCount }
//   //  * @return {Promise} Promise void
//   //  * @memberof BotService
//   //  */
//   // public async sendPhoto({ user, photoPath, photosCount } : { user: User, photoPath: string, photosCount: undefined | number }): Promise<void> {
//   //   const promises = [];
//   //   console.time(`sendPhoto prepare telegram notifications for ${user.username}`);
//   //   user.telegramChats.forEach((telegramChat: ChatDTO) => {
//   //     if (photosCount <= 10) {
//   //       promises.push(this.bot.telegram.sendPhoto(telegramChat.chatId, { source: photoPath }));
//   //     } else {
//   //       promises.push(this.bot.telegram.sendDocument(telegramChat.chatId, { source: photoPath }));
//   //     }
//   //   })

//   //   try {
//   //     await Promise.all(promises);
//   //     console.timeEnd(`sendPhoto prepare telegram notifications for ${user.username}`);
      
//   //   } catch(err) {
//   //     this.logger.error(err);
//   //   }
//   // }
 
// }
// function addCommandsKeyBoard(): import("telegraf/typings/telegram-types").ExtraReplyMessage {
//   throw new Error('Function not implemented.');
// }
